<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.gdu.halbae.mapper.ReviewMapper">

    <!-- 리뷰 작성 -->
    <insert id="insertReview" parameterType="ReviewDTO" useGeneratedKeys="true" keyProperty="reviewNo">
        INSERT INTO REVIEW (USER_NO, CLASS_NO, REVIEW_CONTENT, REVIEW_GRADE, WRITE_DATE)
        VALUES (#{userDTO.userNo}, #{classNo}, #{reviewContent}, #{reviewGrade}, NOW())
    </insert>
	<!-- 첨부 -->
    <insert id="insertReviewAttach" parameterType="ReviewAttachDTO">
        INSERT INTO REVIEW_ATTACH (REVIEW_NO, PATH, ORIGIN_NAME, FILE_NAME, DOWNLOAD, THUMBNAIL)
        VALUES (#{reviewNo}, #{path}, #{originName}, #{fileName}, 0, #{thumbnail})
    </insert>
	<!-- 포인트 업데이트 -->
    <update id="updateUserPoint" parameterType="UserDTO">
	    UPDATE USER
	       SET USER_POINT = #{userPoint}
	     WHERE USER_NO = #{userNo}
	</update>
    
    <!-- 리뷰 첨부 파일 목록 가져오기 -->
    <!-- 리뷰 번호를 파라미터로 받아 해당 리뷰의 첨부 파일 목록을 조회 -->
    <select id="getReviewAttachList" resultType="ReviewAttachDTO">
        SELECT *
          FROM REVIEW_ATTACH
         WHERE REVIEW_NO = #{reviewNo}
    </select>
    
    <!-- 리뷰 목록 -->
    <!-- 리뷰 목록을 조회하여 ReviewDTO 객체에 매핑 -->
	<resultMap id="ReviewAttachResultMap" type="ReviewAttachDTO">
	    <id property="reaNo" column="REA_NO"/>
	    <result property="reviewNo" column="REVIEW_NO"/>
	    <result property="path" column="PATH"/>
	    <result property="originName" column="ORIGIN_NAME"/>
	    <result property="fileName" column="FILE_NAME"/>
	    <result property="download" column="DOWNLOAD"/>
	    <result property="thumbnail" column="THUMBNAIL"/>
	</resultMap>
    
    <resultMap id="ReviewResultMap" type="ReviewDTO">
        <id property="reviewNo" column="REVIEW_NO" />
        <result property="classNo" column="CLASS_NO" />
        <result property="reviewContent" column="REVIEW_CONTENT" />
        <result property="reviewGrade" column="REVIEW_GRADE" />
        <result property="writeDate" column="WRITE_DATE" />
        <result property="userDTO.userName" column="USER_NAME" />
    </resultMap>

	<!-- 전체 리뷰 수 조회 -->
	<select id="getTotalReviewCount" parameterType="int" resultType="int">
	    SELECT COUNT(*) 
	      FROM REVIEW
	     WHERE CLASS_NO = #{classNo}
	</select>
	
    <!-- 리뷰 목록 조회 -->
    <!-- 리뷰 목록을 조회하여 ReviewDTO 객체에 매핑 -->
    <select id="getReviewList" parameterType="Map" resultMap="ReviewResultMap">
        SELECT
            R.REVIEW_NO,
            R.USER_NO,
            R.CLASS_NO,
            R.REVIEW_CONTENT,
            R.REVIEW_GRADE,
            R.WRITE_DATE,
            U.USER_NAME
          FROM REVIEW R INNER JOIN USER U
            ON R.USER_NO = U.USER_NO
         WHERE R.CLASS_NO = #{classNo}
         ORDER BY R.REVIEW_NO DESC
         LIMIT #{begin}, #{recordPerPage}
    </select>

    <!-- 리뷰 평균 평점 조회 -->
    <!-- 리뷰의 평균 평점을 조회 -->
    <select id="getAverageRating" parameterType="int" resultType="double">
		SELECT COALESCE(AVG(REVIEW_GRADE), 0)
		  FROM REVIEW
		 WHERE CLASS_NO = #{classNo}
    </select>
		    
	<!-- 리뷰 좋아요 수 조회 -->
	<select id="countReviewLike" parameterType="ReviewLikeDTO" resultType="int">
		SELECT COUNT(*) 
		  FROM REVIEW_LIKE 
		 WHERE REVIEW_NO = #{reviewNo} 
		   AND USER_NO = #{userNo}
	</select>
	
	<!-- 리뷰 좋아요 등록 -->
	<insert id="insertReviewLike" parameterType="ReviewLikeDTO">
		INSERT INTO REVIEW_LIKE (REVIEW_NO, USER_NO) 
		VALUES (#{reviewNo}, #{userNo})
	</insert>
	
	<!-- 리뷰 좋아요 취소 -->
	<delete id="deleteReviewLike" parameterType="ReviewLikeDTO">
		DELETE 
		  FROM REVIEW_LIKE 
		 WHERE REVIEW_NO = #{reviewNo} 
		   AND USER_NO = #{userNo}
	</delete>
	
	<!-- 리뷰 좋아요 수 업데이트 -->
	<update id="updateReviewLikeCount">
		UPDATE REVIEW 
		   SET LIKES = LIKES + #{count} 
		 WHERE REVIEW_NO = #{reviewNo}
	</update>

    <!-- 사용자명으로 사용자 번호 조회 -->
    <!-- 사용자명을 파라미터로 받아 해당 사용자의 번호를 조회 -->
    <select id="getUserNoByUsername" resultType="int">
        SELECT USER_NO
          FROM USER
         WHERE USER_NAME = #{userName}
    </select>

    <!-- 리뷰 번호로 리뷰 첨부 파일 목록 조회 -->
    <!-- 리뷰 번호를 파라미터로 받아 해당 리뷰의 첨부 파일 목록을 조회 -->
    <select id="getReviewAttachListByReviewNo" resultMap="ReviewAttachResultMap">
        SELECT
            REA_NO,
            REVIEW_NO,
            PATH,
            ORIGIN_NAME,
            FILE_NAME,
            DOWNLOAD,
            THUMBNAIL
          FROM REVIEW_ATTACH
         WHERE REVIEW_NO = #{reviewNo}
    </select>

</mapper>